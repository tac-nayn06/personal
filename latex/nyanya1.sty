%---------------------------------------------
%info
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{nyanya1}[2021/04/21]
%% package name: nyanya1.sty 
%% Copyright 2021 by Neal Yan
%
% This program can redistributed and/or modified under the terms 
% of the LaTeX Project Public License Distributed from CTAN 
% archives in directory macros/latex/base/lppl.txt; either 
% version 1 of the License, or (at your option) any later version.
%
%---------------------------------------------
%asymptote
\RequirePackage[inline]{asymptote}
\begin{asydef}
// OLYMPIAD.ASY; COPYPASTED FROM https://math.berkeley.edu/~monks/images/olympiad.asy
///////////////////////////////////////////////////
// Olympiad Asymptote Package
// By Maria Monks and AoPS Community
// Last Updated: 08/26/2007
/////////////////////////////////////////////////////
size(6cm);
include graph;
include math;
real markscalefactor=0.03;

///////////////////////////////////////////
// USEFUL POINTS
///////////////////////////////////////////

// Substitutes origin for (0,0) for ease of notation:
pair origin;
origin=(0,0);

// The point r of the way along path p with respect to arc length, where r is a real value between 0 and 1 inclusive:
pair waypoint(path p, real r)
{ 
	return point(p,reltime(p,r));
}

// The midpoint of path p:
pair midpoint(path p){ return waypoint(p,.5);}

// The foot of the perpendicular from P to line AB:
pair foot(pair P,pair A, pair B)
{ 
	real s; 
	s=dot(P-A,unit(B-A)); 
	return (scale(s)*unit(B-A)+A);
}

// The point on the angle bisector of <ABC that is a unit distance from B.
// If only two points A and B are specified, the function returns a point
// on the perpendicular bisector of AB, a unit distance from the segment. 
pair bisectorpoint(pair A ... pair[] BC)
{
	pair P,B,C,M; 
	if (BC.length==1) 
	{  
		B=BC[0];  
		M=midpoint(A--B);  
		P=unit(rotate(90,M)*A-M)+M; 
	} 
	else if (BC.length==2) 
	{  
		B=BC[0];  
		C=BC[1];  
		P=unit(midpoint((unit(A-B)+B)--(unit(C-B)+B))-B)+B; 
	} 
	return P;
}

///////////////////////////////////////////
// CIRCLES
///////////////////////////////////////////

// CIRCUMCIRCLE: //

// The circumcenter of triangle ABC:
pair circumcenter(pair A=(0,0), pair B=(0,0), pair C=(0,0))
{ 
	pair M,N,P,Q; 
	M=midpoint(A--B); 
	N=midpoint(B--C); 
	P=rotate(90,M)*A; 
	Q=rotate(90,N)*B; 
	return extension(M,P,N,Q);
}

// The circumradius of triangle ABC:
real circumradius(pair A,pair B,pair C)
{ 
	return abs(circumcenter(A,B,C)-A);
}

// The circumcircle of triangle ABC:
guide circumcircle(pair A=(0,0), pair B=(0,0), pair C=(0,0))
{ 
	return Circle(circumcenter(A,B,C),circumradius(A,B,C));
}

// INCIRCLE: //

// The incenter of triangle ABC:
pair incenter(pair A=(0,0), pair B=(0,0), pair C=(0,0))
{ 
	pair P,Q; 
	P=rotate((angle(C-A)-angle(B-A))*90/pi,A)*B; 
	Q=rotate((angle(A-B)-angle(C-B))*90/pi,B)*C; 
	return extension(A,P,B,Q);
}

// The inradius of triangle ABC:
real inradius(pair A,pair B,pair C)
{ 
	real a,b,c,s; 
	a=abs(B-C); 
	b=abs(A-C); 
	c=abs(B-A); 
	s=(a+b+c)/2; 
	return sqrt(s*(s-a)*(s-b)*(s-c))/s;}

// The inscribed circle of triangle ABC:
guide incircle(pair A=(0,0), pair B=(0,0), pair C=(0,0))
{ 
	return Circle(incenter(A,B,C),inradius(A,B,C));
}

// The nth point of tangency from a point P to the circle with center O and radius r
// where n can be 1 or 2 - the points of tangency are labeled in counterclockwise order around the circle.
// If P is inside the circle, the center of the circle is returned rather than an error.
pair tangent(pair P, pair O, real r, int n=1)
{  
	real d,R;  
	pair X,T;  
	d=abs(P-O);  
	if (d<r) return O;  
	R=sqrt(d^2-r^2);  
	X=intersectionpoint(circle(O,r),O--P);  
	if (n==1)
	{    
		T=intersectionpoint(circle(P,R),Arc(O,r,degrees(X-O),degrees(X-O)+180));    
	}  
	else if (n==2)
	{    
		T=intersectionpoint(circle(P,R),Arc(O,r,degrees(X-O)+180,degrees(X-O)+360));    
	}  
	else {T=O;}  
	return T;
}

// Returns true if ABCD is a cyclic quadrilateral
// Tests if the circumcenters of ABC and ABD are equal within 10^(-5) 
bool cyclic(pair A, pair B, pair C, pair D) 
{ 
	if (abs(circumcenter(A,B,C).x-circumcenter(A,B,D).x)<1/10^(5) && abs(circumcenter(A,B,C).y-circumcenter(A,B,D).y)<1/10^(5)) return true;
    else return false; 
}

///////////////////////////////////////////
// COLLINEARITY AND CONCURRENCY
///////////////////////////////////////////

// Returns true if the lines AB, CD, EF are concurrent 
// within 10^(-5) (to avoid approximation errors),
// or if AB, CD, EF are mutually parallel, intersecting at infinity.
bool concurrent(pair A, pair B, pair C, pair D, pair E, pair F)
{ 
	if ( abs(extension(A,B,C,D).x-extension(C,D,E,F).x)<1/10^(5) &&       
		 abs(extension(A,B,C,D).y-extension(C,D,E,F).y)<1/10^(5) ||     
		 (extension(A,B,C,D)==(infinity,infinity) && 
		 (infinity,infinity)==extension(C,D,E,F))) 
	return true; 
	else return false;
}

// Returns true if points A, B, and C are collinear.
bool collinear(pair A, pair B, pair C)
{ 
	if (A==B || B==C || A==C || abs(unit(B-A)-unit(C-A))<1/10^5 || abs(unit(B-A)+unit(C-A))<1/10^5)  
	return true; 
	else return false;
}

///////////////////////////////////////////
// TRIANGLES AND ASSOCIATED POINTS
///////////////////////////////////////////

// The centroid of triangle ABC:
pair centroid(pair A, pair B, pair C)
{ 
	return (A+B+C)/3;
}

// The orthocenter of triangle ABC:
pair orthocenter(pair A, pair B, pair C)
{ 
return extension(A,foot(A,B,C),B,foot(B,A,C));
}

///////////////////////////////////////////
// TICKMARKS AND ANGLE MARKS
///////////////////////////////////////////

// Returns a right angle mark at B given a right angle ABC
// The optional argument s specifies the side length of the mark in ps points:

path rightanglemark(pair A, pair B, pair C, real s=8)
{ 
	pair P,Q,R; 
	P=s*markscalefactor*unit(A-B)+B; 
	R=s*markscalefactor*unit(C-B)+B; 
	Q=P+R-B; 
	return P--Q--R;
}

// Returns an angle mark on angle ABC consisting of several arcs centered at B.
// The optional arguments t, s[] specify the radius of the arcs in increasing order:
path anglemark(pair A, pair B, pair C, real t=8 ... real[] s)
{ 
	pair M,N,P[],Q[]; 
	path mark; 
	int n=s.length;
	M=t*markscalefactor*unit(A-B)+B; 
	N=t*markscalefactor*unit(C-B)+B; 
	for (int i=0; i<n; ++i)  
	{  
		P[i]=s[i]*markscalefactor*unit(A-B)+B;  
		Q[i]=s[i]*markscalefactor*unit(C-B)+B; 
	} 
	mark=arc(B,M,N); 
	for (int i=0; i<n; ++i) 
	{  
		if (i%2==0)  
		{   
			mark=mark--reverse(arc(B,P[i],Q[i]));  
		}  
		else  
		{   
			mark=mark--arc(B,P[i],Q[i]);   
		} 
	} 
	if (n%2==0 && n!=0) 
	mark=(mark--B--P[n-1]); 
	else if (n!=0) 
	mark=(mark--B--Q[n-1]); 
	else mark=(mark--B--cycle); 
	return mark;
}

// A picture marking a path g with n ticks spaced spacing apart, with length s in ps points
// such that the middle tick mark (or one of the two if n is even) is normal to g
// and located r of the way along path g:
picture pathticks(path g, int n=1, real r=.5, real spacing=6, real s=8, pen p=currentpen)
{ 
	picture pict; 
	pair A,B,C,direct; 
	real t,l=arclength(g), space=spacing*markscalefactor, halftick=s*markscalefactor/2, startpt; 
	if (n>0) 
	{  
		direct=unit(dir(g,arctime(g,r*l)));  
		startpt=r*l-(n-1)/2*space;  
		for (int i=0; i<n; ++i)  
		{  
			t=startpt+i*space;  
			B=point(g,arctime(g,t))+(0,1)*halftick*direct;  
			C=B+2*(0,-1)*halftick*direct;  
			draw(pict,B--C,p);  
		} 
	} 
	return pict;
}
\end{asydef}
%---------------------------------------------
%essential packages/ tikz stuff
\RequirePackage{tikz}
\RequirePackage{tkz-euclide}
\usetikzlibrary{calc}
\RequirePackage{babel}
\RequirePackage{amsmath,amssymb,amsthm,csquotes,enumitem,etoolbox,fancyhdr,
hyperref,ifthen,mathtools,mdframed,imakeidx,xstring,xcolor}
\RequirePackage[margin=1in]{geometry}
\RequirePackage[utf8]{inputenc}
\RequirePackage[symbol]{footmisc}
\RequirePackage[T1]{fontenc}
\RequirePackage{svg}
%---------------------------------------------
%colors, for tcolorbox
\RequirePackage[most]{tcolorbox}
\definecolor{cyan}{HTML}{00FFFF}
\definecolor{white}{HTML}{FFFFFF}
\definecolor{black}{HTML}{000000}
\definecolor{green}{HTML}{00FF00}
\definecolor{red}{HTML}{FF0000}
\definecolor{nyandarkgrn}{HTML}{0D503C}
\definecolor{purple}{HTML}{800080}
%colorboxes for claim, problem, etc
\newtcolorbox{problemBox}{
    colframe=cyan!80!black,
    borderline west={6pt}{0pt}{cyan},
    colback=cyan!25!white
    }
\newtcolorbox{claimBox}{
    colframe=red,
    borderline west={6pt}{0pt}{red},
    colback=red!25!white
    }
\newtcolorbox{lemmaBox}{
    colframe=green,
    borderline west={6pt}{0pt}{green},
    colback=green!20!white
    }
\newtcolorbox{exmpBox}{
    colframe=purple,
    borderline west={6pt}{0pt}{purple},
    colback=purple!20!white
    }
%commands using the tcolorboxes, im too lazy to def envs lul
\newcommand{\problem}[2][source unknown]{
    \begin{problemBox}{
    \latinmodernsans{
        \textbf{Problem(#1).}}} #2
    \end{problemBox}
    }
\newcommand{\claim}[1]{
    \begin{claimBox}\latinmodernsans{\textbf{Claim. }}
    #1\end{claimBox}
    }
\newcommand{\lemma}[1]{
    \begin{lemmaBox}\latinmodernsans{\textbf{Lemma.}} #1\end{lemmaBox}
    }
\newcommand{\exmp}[2][source unknown]{
    \begin{exmpBox}\latinmodernsans{\textbf{Example(#1).}} #2\end{exmpBox}
    }
%---------------------------------------------
%math commands
\DeclarePairedDelimiter\floor{\lfloor}{\rfloor}
\DeclarePairedDelimiter\bigfloor{\bigl\lfloor}{\bigr\rfloor}
\DeclarePairedDelimiter\biggfloor{\biggl\lfloor}{\biggr\rfloor}
\DeclarePairedDelimiter\Biggfloor{\Biggl\lfloor}{\Biggr\rfloor}
\DeclarePairedDelimiter\ceil{\lceil}{\rceil}
\DeclarePairedDelimiter\bigceil{\bigl\lceil}{\bigr\rceil}
\DeclarePairedDelimiter\biggceil{\biggl\lceil}{\biggr\rceil}
\DeclarePairedDelimiter\Biggceil{\Biggl\lceil}{\Biggr\rceil}
\DeclareMathOperator{\nequiv}{\not\equiv}
\DeclareMathOperator{\cyc}{\sum_{\text{cyc}}}
\DeclareMathOperator{\sym}{\sum_{\text{sym}}}
\DeclarePairedDelimiter\abs{|}{|}
\newcommand{\R}{\mathbb{R}}
\newcommand{\C}{\mathbb{C}}
\newcommand{\Q}{\mathbb{Q}}
\newcommand{\Z}{\mathbb{Z}}
\newcommand{\evalat}[2][]{\biggr|_{#2}^{#1}}
\newcommand{\solution}{\noindent\newline\textit{Solution. }}
\newcommand{\remark}{\noindent\newline\textit{Remark. }}
%---------------------------------------------
%fonts, text formatting
\usepackage{lmodern}
\newcommand{\latinmodernsans}[1]{{\fontfamily{lmss}\selectfont #1}}
\usepackage{courier}
\newcommand{\courier}[1]{{\fontfamily{qcr}\selectfont #1}}
\renewcommand{\emph}[1]{\textbf{\latinmodernsans{\textcolor{nyandarkgrn}{#1}}}}
%---------------------------------------------
%sections, etc
\usepackage{titling,titlesec,setspace}
\newcounter{sectionnum}[section]
\newcounter{subsectionnum}[subsection]
\newcounter{subsubsectionnum}[subsubsection]
\apptocmd{\maketitle}{\\\begin{center}
    \textit{Produced using nyanya1.sty}
    \end{center}}{}{}
\renewcommand{\section}[1]{{
    \latinmodernsans{\textcolor{nyandarkgrn}{
        \stepcounter{sectionnum}\setcounter{subsectionnum}{0}\setcounter{subsubsectionnum}{0}
        \noindent\newline 
        \textbf{\Large{\S\thesectionnum\quad #1}
        \newline\noindent
    }}}}}
\renewcommand{\subsection}[1]{
    \latinmodernsans{\textcolor{nyandarkgrn}{\setcounter{subsubsectionnum}{0}
        \stepcounter{subsectionnum}\noindent\newline
        \textbf{\large{\thesectionnum.\thesubsectionnum\quad #1}
        \newline\noindent
    }}}}
\renewcommand{\subsubsection}{
	\stepcounter{subsubsectionnum}
	\noindent\newline\emph{
		\thesectionnum.\thesubsectionnum.\thesubsubsectionnum}
	\newline\noindent
	}
%---------------------------------------------
